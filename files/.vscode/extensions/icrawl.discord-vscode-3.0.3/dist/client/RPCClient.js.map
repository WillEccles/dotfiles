{"version":3,"sources":["client/RPCClient.ts"],"names":[],"mappings":"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","file":"RPCClient.js","sourcesContent":["const { Client } = require('discord-rpc');\nimport {\n\tDisposable,\n\tStatusBarItem,\n\twindow,\n\tworkspace\n} from 'vscode';\nimport Activity from '../structures/Activity';\nimport Logger from '../structures/Logger';\n\nlet activityTimer: NodeJS.Timer;\n\nexport default class RPCClient implements Disposable {\n\tpublic statusBarIcon: StatusBarItem;\n\n\tpublic config = workspace.getConfiguration('discord');\n\n\tprivate _rpc: any;\n\n\tprivate _activity = new Activity();\n\n\tprivate _clientId: string;\n\n\tpublic constructor(clientId: string, statusBarIcon: StatusBarItem) {\n\t\tthis._clientId = clientId;\n\t\tthis.statusBarIcon = statusBarIcon;\n\t}\n\n\tpublic get client() {\n\t\treturn this._rpc;\n\t}\n\n\tpublic setActivity(workspaceElapsedTime: boolean = false) {\n\t\tif (!this._rpc) return;\n\t\tconst activity = this._activity.generate(workspaceElapsedTime);\n\t\tLogger.log('Sending activity to Discord.');\n\t\tthis._rpc.setActivity(activity);\n\t}\n\n\tpublic async login() {\n\t\tif (this._rpc) return;\n\t\tthis._rpc = new Client({ transport: 'ipc' });\n\t\tLogger.log('Logging into RPC.');\n\t\tthis._rpc.once('ready', () => {\n\t\t\tLogger.log('Successfully connected to Discord.');\n\t\t\tif (!this.config.get<boolean>('silent')) window.showInformationMessage('Successfully connected to Discord RPC');\n\n\t\t\tthis.statusBarIcon.hide();\n\n\t\t\tthis.statusBarIcon.text = '$(plug) Reconnect to Discord';\n\t\t\tthis.statusBarIcon.command = 'discord.reconnect';\n\n\t\t\tif (activityTimer) clearInterval(activityTimer);\n\t\t\tthis.setActivity();\n\n\t\t\tthis._rpc.transport.once('close', async () => {\n\t\t\t\tif (!this.config.get<boolean>('enabled')) return;\n\t\t\t\tawait this.dispose();\n\t\t\t\tthis.statusBarIcon.show();\n\t\t\t});\n\n\t\t\tactivityTimer = setInterval(() => {\n\t\t\t\tthis.config = workspace.getConfiguration('discord');\n\t\t\t\tthis.setActivity(this.config.get<boolean>('workspaceElapsedTime'));\n\t\t\t}, 10000);\n\t\t});\n\t\tawait this._rpc.login({ clientId: this._clientId });\n\t}\n\n\tpublic async dispose() {\n\t\tthis._activity.dispose();\n\t\tif (this._rpc) {\n\t\t\tawait this._rpc.destroy();\n\t\t\tthis._rpc = null;\n\t\t}\n\t\tclearInterval(activityTimer);\n\t}\n}\n"],"sourceRoot":"../../src"}